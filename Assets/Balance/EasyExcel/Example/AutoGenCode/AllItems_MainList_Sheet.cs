//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class MainList : EERowData
	{
		[SerializeField]
		private int _ID;
		public int ID { get { return _ID; } }

		[EEKeyField]
		[SerializeField]
		private string _Name;
		public string Name { get { return _Name; } }

		[SerializeField]
		private int _MaxCount;
		public int MaxCount { get { return _MaxCount; } }

		[SerializeField]
		private double _Weight;
		public double Weight { get { return _Weight; } }

		[SerializeField]
		private double _PurchaseValue;
		public double PurchaseValue { get { return _PurchaseValue; } }

		[SerializeField]
		private double _SaleValue;
		public double SaleValue { get { return _SaleValue; } }


		public MainList()
		{
		}

#if UNITY_EDITOR
		public MainList(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			TryParse(sheet[row][column++], out _Name);
			TryParse(sheet[row][column++], out _MaxCount);
			TryParse(sheet[row][column++], out _Weight);
			TryParse(sheet[row][column++], out _PurchaseValue);
			TryParse(sheet[row][column++], out _SaleValue);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class AllItems_MainList_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<MainList> elements = new List<MainList>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as MainList);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
